// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: v1/sales.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SalesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Periodo                string  `protobuf:"bytes,2,opt,name=periodo,proto3" json:"periodo,omitempty"`
	Cuo                    string  `protobuf:"bytes,3,opt,name=cuo,proto3" json:"cuo,omitempty"`
	IdentificadorLinea     string  `protobuf:"bytes,4,opt,name=identificador_linea,json=identificadorLinea,proto3" json:"identificador_linea,omitempty"`
	FechaEmision           string  `protobuf:"bytes,5,opt,name=fecha_emision,json=fechaEmision,proto3" json:"fecha_emision,omitempty"`
	FecEmision             string  `protobuf:"bytes,6,opt,name=fec_emision,json=fecEmision,proto3" json:"fec_emision,omitempty"`
	FechaVencimiento       string  `protobuf:"bytes,7,opt,name=fecha_vencimiento,json=fechaVencimiento,proto3" json:"fecha_vencimiento,omitempty"`
	FecVencPag             string  `protobuf:"bytes,8,opt,name=fec_venc_pag,json=fecVencPag,proto3" json:"fec_venc_pag,omitempty"`
	CodigoTipoCdp          string  `protobuf:"bytes,9,opt,name=codigo_tipo_cdp,json=codigoTipoCdp,proto3" json:"codigo_tipo_cdp,omitempty"`
	CodTipoCdp             string  `protobuf:"bytes,10,opt,name=cod_tipo_cdp,json=codTipoCdp,proto3" json:"cod_tipo_cdp,omitempty"`
	Serie                  string  `protobuf:"bytes,11,opt,name=serie,proto3" json:"serie,omitempty"`
	NumSerieCdp            string  `protobuf:"bytes,12,opt,name=num_serie_cdp,json=numSerieCdp,proto3" json:"num_serie_cdp,omitempty"`
	Correlativo            string  `protobuf:"bytes,13,opt,name=correlativo,proto3" json:"correlativo,omitempty"`
	NumCdp                 string  `protobuf:"bytes,14,opt,name=num_cdp,json=numCdp,proto3" json:"num_cdp,omitempty"`
	NumeroFinal            string  `protobuf:"bytes,15,opt,name=numero_final,json=numeroFinal,proto3" json:"numero_final,omitempty"`
	CodigoTipoDocIdentidad string  `protobuf:"bytes,16,opt,name=codigo_tipo_doc_identidad,json=codigoTipoDocIdentidad,proto3" json:"codigo_tipo_doc_identidad,omitempty"`
	CodTipoDocIdentidad    string  `protobuf:"bytes,17,opt,name=cod_tipo_doc_identidad,json=codTipoDocIdentidad,proto3" json:"cod_tipo_doc_identidad,omitempty"`
	NumDocIdentidad        string  `protobuf:"bytes,18,opt,name=num_doc_identidad,json=numDocIdentidad,proto3" json:"num_doc_identidad,omitempty"`
	NumDocIdentidadClient  string  `protobuf:"bytes,19,opt,name=num_doc_identidad_client,json=numDocIdentidadClient,proto3" json:"num_doc_identidad_client,omitempty"`
	RazonSocial            string  `protobuf:"bytes,20,opt,name=razon_social,json=razonSocial,proto3" json:"razon_social,omitempty"`
	NomRazonSocialCliente  string  `protobuf:"bytes,21,opt,name=nom_razon_social_cliente,json=nomRazonSocialCliente,proto3" json:"nom_razon_social_cliente,omitempty"`
	Exportacion            float32 `protobuf:"fixed32,22,opt,name=exportacion,proto3" json:"exportacion,omitempty"`
	MtoValFactExpo         float32 `protobuf:"fixed32,23,opt,name=mto_val_fact_expo,json=mtoValFactExpo,proto3" json:"mto_val_fact_expo,omitempty"`
	Base                   float32 `protobuf:"fixed32,24,opt,name=base,proto3" json:"base,omitempty"`
	MtoBiGravada           float32 `protobuf:"fixed32,25,opt,name=mto_bi_gravada,json=mtoBiGravada,proto3" json:"mto_bi_gravada,omitempty"`
	DescBase               float32 `protobuf:"fixed32,26,opt,name=desc_base,json=descBase,proto3" json:"desc_base,omitempty"`
	MtoDsctoBi             float32 `protobuf:"fixed32,27,opt,name=mto_dscto_bi,json=mtoDsctoBi,proto3" json:"mto_dscto_bi,omitempty"`
	Igv                    float32 `protobuf:"fixed32,28,opt,name=igv,proto3" json:"igv,omitempty"`
	MtoIgv                 float32 `protobuf:"fixed32,29,opt,name=mto_igv,json=mtoIgv,proto3" json:"mto_igv,omitempty"`
	DescIgv                float32 `protobuf:"fixed32,30,opt,name=desc_igv,json=descIgv,proto3" json:"desc_igv,omitempty"`
	MtoDsctoIgv            float32 `protobuf:"fixed32,31,opt,name=mto_dscto_igv,json=mtoDsctoIgv,proto3" json:"mto_dscto_igv,omitempty"`
	Exonerada              float32 `protobuf:"fixed32,32,opt,name=exonerada,proto3" json:"exonerada,omitempty"`
	MtoExonerado           float32 `protobuf:"fixed32,33,opt,name=mto_exonerado,json=mtoExonerado,proto3" json:"mto_exonerado,omitempty"`
	Inafecta               float32 `protobuf:"fixed32,34,opt,name=inafecta,proto3" json:"inafecta,omitempty"`
	MtoInafecto            float32 `protobuf:"fixed32,35,opt,name=mto_inafecto,json=mtoInafecto,proto3" json:"mto_inafecto,omitempty"`
	Isc                    float32 `protobuf:"fixed32,36,opt,name=isc,proto3" json:"isc,omitempty"`
	MtoIsc                 float32 `protobuf:"fixed32,37,opt,name=mto_isc,json=mtoIsc,proto3" json:"mto_isc,omitempty"`
	BaseIvap               float32 `protobuf:"fixed32,38,opt,name=base_ivap,json=baseIvap,proto3" json:"base_ivap,omitempty"`
	MtoBIIvap              float32 `protobuf:"fixed32,39,opt,name=mto_b_i_ivap,json=mtoBIIvap,proto3" json:"mto_b_i_ivap,omitempty"`
	Ivap                   float32 `protobuf:"fixed32,40,opt,name=ivap,proto3" json:"ivap,omitempty"`
	MtoIvap                float32 `protobuf:"fixed32,41,opt,name=mto_ivap,json=mtoIvap,proto3" json:"mto_ivap,omitempty"`
	Otros                  float32 `protobuf:"fixed32,42,opt,name=otros,proto3" json:"otros,omitempty"`
	MtoOtrosTrib           float32 `protobuf:"fixed32,43,opt,name=mto_otros_trib,json=mtoOtrosTrib,proto3" json:"mto_otros_trib,omitempty"`
	Total                  float32 `protobuf:"fixed32,44,opt,name=total,proto3" json:"total,omitempty"`
	MtoTotalCp             float32 `protobuf:"fixed32,45,opt,name=mto_total_cp,json=mtoTotalCp,proto3" json:"mto_total_cp,omitempty"`
	CodigoMoneda           string  `protobuf:"bytes,46,opt,name=codigo_moneda,json=codigoMoneda,proto3" json:"codigo_moneda,omitempty"`
	CodMoneda              string  `protobuf:"bytes,47,opt,name=cod_moneda,json=codMoneda,proto3" json:"cod_moneda,omitempty"`
	TipoCambio             float32 `protobuf:"fixed32,48,opt,name=tipo_cambio,json=tipoCambio,proto3" json:"tipo_cambio,omitempty"`
	MtoTipoCambio          float32 `protobuf:"fixed32,49,opt,name=mto_tipo_cambio,json=mtoTipoCambio,proto3" json:"mto_tipo_cambio,omitempty"`
	FechaCdpm              string  `protobuf:"bytes,50,opt,name=fecha_cdpm,json=fechaCdpm,proto3" json:"fecha_cdpm,omitempty"`
	FecEmisionMod          string  `protobuf:"bytes,51,opt,name=fec_emision_mod,json=fecEmisionMod,proto3" json:"fec_emision_mod,omitempty"`
	CodigoTipoCdpMod       string  `protobuf:"bytes,52,opt,name=codigo_tipo_cdp_mod,json=codigoTipoCdpMod,proto3" json:"codigo_tipo_cdp_mod,omitempty"`
	CodTipoCdpMod          string  `protobuf:"bytes,53,opt,name=cod_tipo_cdp_mod,json=codTipoCdpMod,proto3" json:"cod_tipo_cdp_mod,omitempty"`
	NumSerieCdpMod         string  `protobuf:"bytes,54,opt,name=num_serie_cdp_mod,json=numSerieCdpMod,proto3" json:"num_serie_cdp_mod,omitempty"`
	NumCdpMod              string  `protobuf:"bytes,55,opt,name=num_cdp_mod,json=numCdpMod,proto3" json:"num_cdp_mod,omitempty"`
	Numero                 string  `protobuf:"bytes,56,opt,name=numero,proto3" json:"numero,omitempty"`
	NumCdpMod2             string  `protobuf:"bytes,57,opt,name=num_cdp_mod2,json=numCdpMod2,proto3" json:"num_cdp_mod2,omitempty"`
	IdentificadorContrato  string  `protobuf:"bytes,58,opt,name=identificador_contrato,json=identificadorContrato,proto3" json:"identificador_contrato,omitempty"`
	Error1                 bool    `protobuf:"varint,59,opt,name=error1,proto3" json:"error1,omitempty"`
	Identificador          bool    `protobuf:"varint,60,opt,name=identificador,proto3" json:"identificador,omitempty"`
	EstadoOperacion        string  `protobuf:"bytes,61,opt,name=estado_operacion,json=estadoOperacion,proto3" json:"estado_operacion,omitempty"`
	CodEstadoComprobante   string  `protobuf:"bytes,62,opt,name=cod_estado_comprobante,json=codEstadoComprobante,proto3" json:"cod_estado_comprobante,omitempty"`
	Icbper                 float32 `protobuf:"fixed32,63,opt,name=icbper,proto3" json:"icbper,omitempty"`
	MtoIcbp                float32 `protobuf:"fixed32,64,opt,name=mto_icbp,json=mtoIcbp,proto3" json:"mto_icbp,omitempty"`
	EstadoCpe              string  `protobuf:"bytes,65,opt,name=estado_cpe,json=estadoCpe,proto3" json:"estado_cpe,omitempty"`
	Observaciones          string  `protobuf:"bytes,66,opt,name=observaciones,proto3" json:"observaciones,omitempty"`
}

func (x *SalesReport) Reset() {
	*x = SalesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sales_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesReport) ProtoMessage() {}

func (x *SalesReport) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sales_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesReport.ProtoReflect.Descriptor instead.
func (*SalesReport) Descriptor() ([]byte, []int) {
	return file_v1_sales_proto_rawDescGZIP(), []int{0}
}

func (x *SalesReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SalesReport) GetPeriodo() string {
	if x != nil {
		return x.Periodo
	}
	return ""
}

func (x *SalesReport) GetCuo() string {
	if x != nil {
		return x.Cuo
	}
	return ""
}

func (x *SalesReport) GetIdentificadorLinea() string {
	if x != nil {
		return x.IdentificadorLinea
	}
	return ""
}

func (x *SalesReport) GetFechaEmision() string {
	if x != nil {
		return x.FechaEmision
	}
	return ""
}

func (x *SalesReport) GetFecEmision() string {
	if x != nil {
		return x.FecEmision
	}
	return ""
}

func (x *SalesReport) GetFechaVencimiento() string {
	if x != nil {
		return x.FechaVencimiento
	}
	return ""
}

func (x *SalesReport) GetFecVencPag() string {
	if x != nil {
		return x.FecVencPag
	}
	return ""
}

func (x *SalesReport) GetCodigoTipoCdp() string {
	if x != nil {
		return x.CodigoTipoCdp
	}
	return ""
}

func (x *SalesReport) GetCodTipoCdp() string {
	if x != nil {
		return x.CodTipoCdp
	}
	return ""
}

func (x *SalesReport) GetSerie() string {
	if x != nil {
		return x.Serie
	}
	return ""
}

func (x *SalesReport) GetNumSerieCdp() string {
	if x != nil {
		return x.NumSerieCdp
	}
	return ""
}

func (x *SalesReport) GetCorrelativo() string {
	if x != nil {
		return x.Correlativo
	}
	return ""
}

func (x *SalesReport) GetNumCdp() string {
	if x != nil {
		return x.NumCdp
	}
	return ""
}

func (x *SalesReport) GetNumeroFinal() string {
	if x != nil {
		return x.NumeroFinal
	}
	return ""
}

func (x *SalesReport) GetCodigoTipoDocIdentidad() string {
	if x != nil {
		return x.CodigoTipoDocIdentidad
	}
	return ""
}

func (x *SalesReport) GetCodTipoDocIdentidad() string {
	if x != nil {
		return x.CodTipoDocIdentidad
	}
	return ""
}

func (x *SalesReport) GetNumDocIdentidad() string {
	if x != nil {
		return x.NumDocIdentidad
	}
	return ""
}

func (x *SalesReport) GetNumDocIdentidadClient() string {
	if x != nil {
		return x.NumDocIdentidadClient
	}
	return ""
}

func (x *SalesReport) GetRazonSocial() string {
	if x != nil {
		return x.RazonSocial
	}
	return ""
}

func (x *SalesReport) GetNomRazonSocialCliente() string {
	if x != nil {
		return x.NomRazonSocialCliente
	}
	return ""
}

func (x *SalesReport) GetExportacion() float32 {
	if x != nil {
		return x.Exportacion
	}
	return 0
}

func (x *SalesReport) GetMtoValFactExpo() float32 {
	if x != nil {
		return x.MtoValFactExpo
	}
	return 0
}

func (x *SalesReport) GetBase() float32 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *SalesReport) GetMtoBiGravada() float32 {
	if x != nil {
		return x.MtoBiGravada
	}
	return 0
}

func (x *SalesReport) GetDescBase() float32 {
	if x != nil {
		return x.DescBase
	}
	return 0
}

func (x *SalesReport) GetMtoDsctoBi() float32 {
	if x != nil {
		return x.MtoDsctoBi
	}
	return 0
}

func (x *SalesReport) GetIgv() float32 {
	if x != nil {
		return x.Igv
	}
	return 0
}

func (x *SalesReport) GetMtoIgv() float32 {
	if x != nil {
		return x.MtoIgv
	}
	return 0
}

func (x *SalesReport) GetDescIgv() float32 {
	if x != nil {
		return x.DescIgv
	}
	return 0
}

func (x *SalesReport) GetMtoDsctoIgv() float32 {
	if x != nil {
		return x.MtoDsctoIgv
	}
	return 0
}

func (x *SalesReport) GetExonerada() float32 {
	if x != nil {
		return x.Exonerada
	}
	return 0
}

func (x *SalesReport) GetMtoExonerado() float32 {
	if x != nil {
		return x.MtoExonerado
	}
	return 0
}

func (x *SalesReport) GetInafecta() float32 {
	if x != nil {
		return x.Inafecta
	}
	return 0
}

func (x *SalesReport) GetMtoInafecto() float32 {
	if x != nil {
		return x.MtoInafecto
	}
	return 0
}

func (x *SalesReport) GetIsc() float32 {
	if x != nil {
		return x.Isc
	}
	return 0
}

func (x *SalesReport) GetMtoIsc() float32 {
	if x != nil {
		return x.MtoIsc
	}
	return 0
}

func (x *SalesReport) GetBaseIvap() float32 {
	if x != nil {
		return x.BaseIvap
	}
	return 0
}

func (x *SalesReport) GetMtoBIIvap() float32 {
	if x != nil {
		return x.MtoBIIvap
	}
	return 0
}

func (x *SalesReport) GetIvap() float32 {
	if x != nil {
		return x.Ivap
	}
	return 0
}

func (x *SalesReport) GetMtoIvap() float32 {
	if x != nil {
		return x.MtoIvap
	}
	return 0
}

func (x *SalesReport) GetOtros() float32 {
	if x != nil {
		return x.Otros
	}
	return 0
}

func (x *SalesReport) GetMtoOtrosTrib() float32 {
	if x != nil {
		return x.MtoOtrosTrib
	}
	return 0
}

func (x *SalesReport) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SalesReport) GetMtoTotalCp() float32 {
	if x != nil {
		return x.MtoTotalCp
	}
	return 0
}

func (x *SalesReport) GetCodigoMoneda() string {
	if x != nil {
		return x.CodigoMoneda
	}
	return ""
}

func (x *SalesReport) GetCodMoneda() string {
	if x != nil {
		return x.CodMoneda
	}
	return ""
}

func (x *SalesReport) GetTipoCambio() float32 {
	if x != nil {
		return x.TipoCambio
	}
	return 0
}

func (x *SalesReport) GetMtoTipoCambio() float32 {
	if x != nil {
		return x.MtoTipoCambio
	}
	return 0
}

func (x *SalesReport) GetFechaCdpm() string {
	if x != nil {
		return x.FechaCdpm
	}
	return ""
}

func (x *SalesReport) GetFecEmisionMod() string {
	if x != nil {
		return x.FecEmisionMod
	}
	return ""
}

func (x *SalesReport) GetCodigoTipoCdpMod() string {
	if x != nil {
		return x.CodigoTipoCdpMod
	}
	return ""
}

func (x *SalesReport) GetCodTipoCdpMod() string {
	if x != nil {
		return x.CodTipoCdpMod
	}
	return ""
}

func (x *SalesReport) GetNumSerieCdpMod() string {
	if x != nil {
		return x.NumSerieCdpMod
	}
	return ""
}

func (x *SalesReport) GetNumCdpMod() string {
	if x != nil {
		return x.NumCdpMod
	}
	return ""
}

func (x *SalesReport) GetNumero() string {
	if x != nil {
		return x.Numero
	}
	return ""
}

func (x *SalesReport) GetNumCdpMod2() string {
	if x != nil {
		return x.NumCdpMod2
	}
	return ""
}

func (x *SalesReport) GetIdentificadorContrato() string {
	if x != nil {
		return x.IdentificadorContrato
	}
	return ""
}

func (x *SalesReport) GetError1() bool {
	if x != nil {
		return x.Error1
	}
	return false
}

func (x *SalesReport) GetIdentificador() bool {
	if x != nil {
		return x.Identificador
	}
	return false
}

func (x *SalesReport) GetEstadoOperacion() string {
	if x != nil {
		return x.EstadoOperacion
	}
	return ""
}

func (x *SalesReport) GetCodEstadoComprobante() string {
	if x != nil {
		return x.CodEstadoComprobante
	}
	return ""
}

func (x *SalesReport) GetIcbper() float32 {
	if x != nil {
		return x.Icbper
	}
	return 0
}

func (x *SalesReport) GetMtoIcbp() float32 {
	if x != nil {
		return x.MtoIcbp
	}
	return 0
}

func (x *SalesReport) GetEstadoCpe() string {
	if x != nil {
		return x.EstadoCpe
	}
	return ""
}

func (x *SalesReport) GetObservaciones() string {
	if x != nil {
		return x.Observaciones
	}
	return ""
}

type RetrieveSalesPaginatedReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sales      []*SalesReport `protobuf:"bytes,1,rep,name=sales,proto3" json:"sales,omitempty"`
	Pagination *Pagination    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *RetrieveSalesPaginatedReportResponse) Reset() {
	*x = RetrieveSalesPaginatedReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sales_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSalesPaginatedReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSalesPaginatedReportResponse) ProtoMessage() {}

func (x *RetrieveSalesPaginatedReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sales_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSalesPaginatedReportResponse.ProtoReflect.Descriptor instead.
func (*RetrieveSalesPaginatedReportResponse) Descriptor() ([]byte, []int) {
	return file_v1_sales_proto_rawDescGZIP(), []int{1}
}

func (x *RetrieveSalesPaginatedReportResponse) GetSales() []*SalesReport {
	if x != nil {
		return x.Sales
	}
	return nil
}

func (x *RetrieveSalesPaginatedReportResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type RetrieveSalesPaginatedReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId string `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	Period     string `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	Page       int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *RetrieveSalesPaginatedReportRequest) Reset() {
	*x = RetrieveSalesPaginatedReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sales_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSalesPaginatedReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSalesPaginatedReportRequest) ProtoMessage() {}

func (x *RetrieveSalesPaginatedReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sales_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSalesPaginatedReportRequest.ProtoReflect.Descriptor instead.
func (*RetrieveSalesPaginatedReportRequest) Descriptor() ([]byte, []int) {
	return file_v1_sales_proto_rawDescGZIP(), []int{2}
}

func (x *RetrieveSalesPaginatedReportRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *RetrieveSalesPaginatedReportRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *RetrieveSalesPaginatedReportRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RetrieveSalesPaginatedReportRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type RetrieveSalesResourceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessId string       `protobuf:"bytes,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	Period     string       `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	Type       TypeResource `protobuf:"varint,3,opt,name=type,proto3,enum=v1.TypeResource" json:"type,omitempty"`
}

func (x *RetrieveSalesResourceReportRequest) Reset() {
	*x = RetrieveSalesResourceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sales_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSalesResourceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSalesResourceReportRequest) ProtoMessage() {}

func (x *RetrieveSalesResourceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sales_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSalesResourceReportRequest.ProtoReflect.Descriptor instead.
func (*RetrieveSalesResourceReportRequest) Descriptor() ([]byte, []int) {
	return file_v1_sales_proto_rawDescGZIP(), []int{3}
}

func (x *RetrieveSalesResourceReportRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *RetrieveSalesResourceReportRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *RetrieveSalesResourceReportRequest) GetType() TypeResource {
	if x != nil {
		return x.Type
	}
	return TypeResource_TYPE_RESOURCE_UNSPECIFIED
}

type RetrieveSalesResourceReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RetrieveSalesResourceReportResponse) Reset() {
	*x = RetrieveSalesResourceReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sales_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveSalesResourceReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveSalesResourceReportResponse) ProtoMessage() {}

func (x *RetrieveSalesResourceReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sales_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveSalesResourceReportResponse.ProtoReflect.Descriptor instead.
func (*RetrieveSalesResourceReportResponse) Descriptor() ([]byte, []int) {
	return file_v1_sales_proto_rawDescGZIP(), []int{4}
}

func (x *RetrieveSalesResourceReportResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_v1_sales_proto protoreflect.FileDescriptor

var file_v1_sales_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x11, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x75, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x75,
	0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64,
	0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x63, 0x68, 0x61, 0x5f, 0x65, 0x6d, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x63, 0x68, 0x61,
	0x45, 0x6d, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x63, 0x5f, 0x65,
	0x6d, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65,
	0x63, 0x45, 0x6d, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x65, 0x63, 0x68,
	0x61, 0x5f, 0x76, 0x65, 0x6e, 0x63, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x65, 0x63, 0x68, 0x61, 0x56, 0x65, 0x6e, 0x63, 0x69, 0x6d,
	0x69, 0x65, 0x6e, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x6e,
	0x63, 0x5f, 0x70, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x63,
	0x56, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x69, 0x67,
	0x6f, 0x5f, 0x74, 0x69, 0x70, 0x6f, 0x5f, 0x63, 0x64, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x64, 0x69, 0x67, 0x6f, 0x54, 0x69, 0x70, 0x6f, 0x43, 0x64, 0x70, 0x12,
	0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x70, 0x6f, 0x5f, 0x63, 0x64, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x54, 0x69, 0x70, 0x6f, 0x43, 0x64,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x72, 0x69, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x65, 0x72, 0x69, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x5f, 0x63, 0x64, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x69, 0x65, 0x43, 0x64, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x64, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x43, 0x64, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x6f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f, 0x64,
	0x69, 0x67, 0x6f, 0x5f, 0x74, 0x69, 0x70, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f,
	0x64, 0x69, 0x67, 0x6f, 0x54, 0x69, 0x70, 0x6f, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x64, 0x61, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x70, 0x6f,
	0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x64, 0x54, 0x69, 0x70, 0x6f, 0x44, 0x6f, 0x63,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x63,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x7a, 0x6f, 0x6e, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x6f, 0x6d, 0x5f, 0x72, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6e, 0x6f, 0x6d, 0x52, 0x61, 0x7a, 0x6f, 0x6e, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11,
	0x6d, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x46,
	0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x74, 0x6f, 0x5f, 0x62, 0x69, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x61, 0x64, 0x61, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x74, 0x6f, 0x42, 0x69, 0x47, 0x72, 0x61, 0x76, 0x61, 0x64,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x42, 0x61, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x74, 0x6f, 0x5f, 0x62, 0x69, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x74, 0x6f, 0x44, 0x73, 0x63, 0x74, 0x6f, 0x42, 0x69,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x67, 0x76, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x69,
	0x67, 0x76, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x74, 0x6f, 0x5f, 0x69, 0x67, 0x76, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x74, 0x6f, 0x49, 0x67, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x5f, 0x69, 0x67, 0x76, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64,
	0x65, 0x73, 0x63, 0x49, 0x67, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x74, 0x6f, 0x5f, 0x64, 0x73,
	0x63, 0x74, 0x6f, 0x5f, 0x69, 0x67, 0x76, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d,
	0x74, 0x6f, 0x44, 0x73, 0x63, 0x74, 0x6f, 0x49, 0x67, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x6f, 0x6e, 0x65, 0x72, 0x61, 0x64, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65,
	0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x64, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x74, 0x6f, 0x5f,
	0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x64, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6d, 0x74, 0x6f, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x64, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x61, 0x66, 0x65, 0x63, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x69, 0x6e, 0x61, 0x66, 0x65, 0x63, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x74, 0x6f,
	0x5f, 0x69, 0x6e, 0x61, 0x66, 0x65, 0x63, 0x74, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6d, 0x74, 0x6f, 0x49, 0x6e, 0x61, 0x66, 0x65, 0x63, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x73, 0x63, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x69, 0x73, 0x63, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x74, 0x6f, 0x5f, 0x69, 0x73, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x6d, 0x74, 0x6f, 0x49, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x76, 0x61, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x76, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0c, 0x6d, 0x74, 0x6f, 0x5f, 0x62, 0x5f, 0x69, 0x5f,
	0x69, 0x76, 0x61, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x74, 0x6f, 0x42,
	0x49, 0x49, 0x76, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x76, 0x61, 0x70, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x69, 0x76, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x74, 0x6f,
	0x5f, 0x69, 0x76, 0x61, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x74, 0x6f,
	0x49, 0x76, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x74,
	0x6f, 0x5f, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x62, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x74, 0x6f, 0x4f, 0x74, 0x72, 0x6f, 0x73, 0x54, 0x72, 0x69, 0x62,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x74, 0x6f, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x74,
	0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x64, 0x69,
	0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x64, 0x69, 0x67, 0x6f, 0x4d, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x69, 0x70, 0x6f, 0x5f, 0x63, 0x61, 0x6d, 0x62, 0x69, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x74, 0x69, 0x70, 0x6f, 0x43, 0x61, 0x6d, 0x62, 0x69, 0x6f, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x70, 0x6f, 0x5f, 0x63, 0x61, 0x6d, 0x62, 0x69, 0x6f,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x74, 0x6f, 0x54, 0x69, 0x70, 0x6f, 0x43,
	0x61, 0x6d, 0x62, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x63, 0x68, 0x61, 0x5f, 0x63,
	0x64, 0x70, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x63, 0x68, 0x61,
	0x43, 0x64, 0x70, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x65, 0x63, 0x5f, 0x65, 0x6d, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x65, 0x63, 0x45, 0x6d, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x63, 0x6f, 0x64, 0x69, 0x67, 0x6f, 0x5f, 0x74, 0x69, 0x70, 0x6f, 0x5f, 0x63, 0x64, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x69, 0x67,
	0x6f, 0x54, 0x69, 0x70, 0x6f, 0x43, 0x64, 0x70, 0x4d, 0x6f, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x5f, 0x74, 0x69, 0x70, 0x6f, 0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x54, 0x69, 0x70, 0x6f, 0x43, 0x64,
	0x70, 0x4d, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x69, 0x65, 0x43, 0x64, 0x70, 0x4d, 0x6f, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x64, 0x70, 0x4d, 0x6f, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x64, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x32, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x43, 0x64, 0x70, 0x4d, 0x6f, 0x64, 0x32, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x31, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x31, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x63, 0x69,
	0x6f, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x64,
	0x5f, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x6e, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x64, 0x45, 0x73,
	0x74, 0x61, 0x64, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x6e, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x63, 0x62, 0x70, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x69, 0x63, 0x62, 0x70, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x74, 0x6f, 0x5f, 0x69,
	0x63, 0x62, 0x70, 0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x74, 0x6f, 0x49, 0x63,
	0x62, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x5f, 0x63, 0x70, 0x65,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x43, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x63, 0x69, 0x6f, 0x6e,
	0x65, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x37,
	0x0a, 0x23, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x32, 0xf1, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x71, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x65, 0x6e, 0x72, 0x79, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02,
	0x02, 0x56, 0x31, 0xca, 0x02, 0x02, 0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_sales_proto_rawDescOnce sync.Once
	file_v1_sales_proto_rawDescData = file_v1_sales_proto_rawDesc
)

func file_v1_sales_proto_rawDescGZIP() []byte {
	file_v1_sales_proto_rawDescOnce.Do(func() {
		file_v1_sales_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_sales_proto_rawDescData)
	})
	return file_v1_sales_proto_rawDescData
}

var file_v1_sales_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_v1_sales_proto_goTypes = []any{
	(*SalesReport)(nil),                          // 0: v1.SalesReport
	(*RetrieveSalesPaginatedReportResponse)(nil), // 1: v1.RetrieveSalesPaginatedReportResponse
	(*RetrieveSalesPaginatedReportRequest)(nil),  // 2: v1.RetrieveSalesPaginatedReportRequest
	(*RetrieveSalesResourceReportRequest)(nil),   // 3: v1.RetrieveSalesResourceReportRequest
	(*RetrieveSalesResourceReportResponse)(nil),  // 4: v1.RetrieveSalesResourceReportResponse
	(*Pagination)(nil),                           // 5: v1.Pagination
	(TypeResource)(0),                            // 6: v1.TypeResource
}
var file_v1_sales_proto_depIdxs = []int32{
	0, // 0: v1.RetrieveSalesPaginatedReportResponse.sales:type_name -> v1.SalesReport
	5, // 1: v1.RetrieveSalesPaginatedReportResponse.pagination:type_name -> v1.Pagination
	6, // 2: v1.RetrieveSalesResourceReportRequest.type:type_name -> v1.TypeResource
	2, // 3: v1.SalesService.RetrieveSalesPaginatedReport:input_type -> v1.RetrieveSalesPaginatedReportRequest
	3, // 4: v1.SalesService.RetrieveSalesResourceReport:input_type -> v1.RetrieveSalesResourceReportRequest
	1, // 5: v1.SalesService.RetrieveSalesPaginatedReport:output_type -> v1.RetrieveSalesPaginatedReportResponse
	4, // 6: v1.SalesService.RetrieveSalesResourceReport:output_type -> v1.RetrieveSalesResourceReportResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_v1_sales_proto_init() }
func file_v1_sales_proto_init() {
	if File_v1_sales_proto != nil {
		return
	}
	file_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_sales_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SalesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sales_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RetrieveSalesPaginatedReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sales_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RetrieveSalesPaginatedReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sales_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RetrieveSalesResourceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sales_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RetrieveSalesResourceReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_sales_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_sales_proto_goTypes,
		DependencyIndexes: file_v1_sales_proto_depIdxs,
		MessageInfos:      file_v1_sales_proto_msgTypes,
	}.Build()
	File_v1_sales_proto = out.File
	file_v1_sales_proto_rawDesc = nil
	file_v1_sales_proto_goTypes = nil
	file_v1_sales_proto_depIdxs = nil
}
