// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/sales.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/henrybravo/micro-report/protos/gen/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SalesServiceName is the fully-qualified name of the SalesService service.
	SalesServiceName = "v1.SalesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SalesServiceRetrieveSalesPaginatedReportProcedure is the fully-qualified name of the
	// SalesService's RetrieveSalesPaginatedReport RPC.
	SalesServiceRetrieveSalesPaginatedReportProcedure = "/v1.SalesService/RetrieveSalesPaginatedReport"
	// SalesServiceRetrieveSalesResourceReportProcedure is the fully-qualified name of the
	// SalesService's RetrieveSalesResourceReport RPC.
	SalesServiceRetrieveSalesResourceReportProcedure = "/v1.SalesService/RetrieveSalesResourceReport"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	salesServiceServiceDescriptor                            = v1.File_v1_sales_proto.Services().ByName("SalesService")
	salesServiceRetrieveSalesPaginatedReportMethodDescriptor = salesServiceServiceDescriptor.Methods().ByName("RetrieveSalesPaginatedReport")
	salesServiceRetrieveSalesResourceReportMethodDescriptor  = salesServiceServiceDescriptor.Methods().ByName("RetrieveSalesResourceReport")
)

// SalesServiceClient is a client for the v1.SalesService service.
type SalesServiceClient interface {
	RetrieveSalesPaginatedReport(context.Context, *connect.Request[v1.RetrieveSalesPaginatedReportRequest]) (*connect.Response[v1.RetrieveSalesPaginatedReportResponse], error)
	RetrieveSalesResourceReport(context.Context, *connect.Request[v1.RetrieveSalesResourceReportRequest]) (*connect.Response[v1.RetrieveSalesResourceReportResponse], error)
}

// NewSalesServiceClient constructs a client for the v1.SalesService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSalesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SalesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &salesServiceClient{
		retrieveSalesPaginatedReport: connect.NewClient[v1.RetrieveSalesPaginatedReportRequest, v1.RetrieveSalesPaginatedReportResponse](
			httpClient,
			baseURL+SalesServiceRetrieveSalesPaginatedReportProcedure,
			connect.WithSchema(salesServiceRetrieveSalesPaginatedReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		retrieveSalesResourceReport: connect.NewClient[v1.RetrieveSalesResourceReportRequest, v1.RetrieveSalesResourceReportResponse](
			httpClient,
			baseURL+SalesServiceRetrieveSalesResourceReportProcedure,
			connect.WithSchema(salesServiceRetrieveSalesResourceReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// salesServiceClient implements SalesServiceClient.
type salesServiceClient struct {
	retrieveSalesPaginatedReport *connect.Client[v1.RetrieveSalesPaginatedReportRequest, v1.RetrieveSalesPaginatedReportResponse]
	retrieveSalesResourceReport  *connect.Client[v1.RetrieveSalesResourceReportRequest, v1.RetrieveSalesResourceReportResponse]
}

// RetrieveSalesPaginatedReport calls v1.SalesService.RetrieveSalesPaginatedReport.
func (c *salesServiceClient) RetrieveSalesPaginatedReport(ctx context.Context, req *connect.Request[v1.RetrieveSalesPaginatedReportRequest]) (*connect.Response[v1.RetrieveSalesPaginatedReportResponse], error) {
	return c.retrieveSalesPaginatedReport.CallUnary(ctx, req)
}

// RetrieveSalesResourceReport calls v1.SalesService.RetrieveSalesResourceReport.
func (c *salesServiceClient) RetrieveSalesResourceReport(ctx context.Context, req *connect.Request[v1.RetrieveSalesResourceReportRequest]) (*connect.Response[v1.RetrieveSalesResourceReportResponse], error) {
	return c.retrieveSalesResourceReport.CallUnary(ctx, req)
}

// SalesServiceHandler is an implementation of the v1.SalesService service.
type SalesServiceHandler interface {
	RetrieveSalesPaginatedReport(context.Context, *connect.Request[v1.RetrieveSalesPaginatedReportRequest]) (*connect.Response[v1.RetrieveSalesPaginatedReportResponse], error)
	RetrieveSalesResourceReport(context.Context, *connect.Request[v1.RetrieveSalesResourceReportRequest]) (*connect.Response[v1.RetrieveSalesResourceReportResponse], error)
}

// NewSalesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSalesServiceHandler(svc SalesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	salesServiceRetrieveSalesPaginatedReportHandler := connect.NewUnaryHandler(
		SalesServiceRetrieveSalesPaginatedReportProcedure,
		svc.RetrieveSalesPaginatedReport,
		connect.WithSchema(salesServiceRetrieveSalesPaginatedReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	salesServiceRetrieveSalesResourceReportHandler := connect.NewUnaryHandler(
		SalesServiceRetrieveSalesResourceReportProcedure,
		svc.RetrieveSalesResourceReport,
		connect.WithSchema(salesServiceRetrieveSalesResourceReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.SalesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SalesServiceRetrieveSalesPaginatedReportProcedure:
			salesServiceRetrieveSalesPaginatedReportHandler.ServeHTTP(w, r)
		case SalesServiceRetrieveSalesResourceReportProcedure:
			salesServiceRetrieveSalesResourceReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSalesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSalesServiceHandler struct{}

func (UnimplementedSalesServiceHandler) RetrieveSalesPaginatedReport(context.Context, *connect.Request[v1.RetrieveSalesPaginatedReportRequest]) (*connect.Response[v1.RetrieveSalesPaginatedReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.SalesService.RetrieveSalesPaginatedReport is not implemented"))
}

func (UnimplementedSalesServiceHandler) RetrieveSalesResourceReport(context.Context, *connect.Request[v1.RetrieveSalesResourceReportRequest]) (*connect.Response[v1.RetrieveSalesResourceReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.SalesService.RetrieveSalesResourceReport is not implemented"))
}
