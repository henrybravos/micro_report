// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/purchases.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/henrybravo/micro-report/protos/gen/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PurchaseServiceName is the fully-qualified name of the PurchaseService service.
	PurchaseServiceName = "v1.PurchaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PurchaseServiceRetrievePurchaseReportProcedure is the fully-qualified name of the
	// PurchaseService's RetrievePurchaseReport RPC.
	PurchaseServiceRetrievePurchaseReportProcedure = "/v1.PurchaseService/RetrievePurchaseReport"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	purchaseServiceServiceDescriptor                      = v1.File_v1_purchases_proto.Services().ByName("PurchaseService")
	purchaseServiceRetrievePurchaseReportMethodDescriptor = purchaseServiceServiceDescriptor.Methods().ByName("RetrievePurchaseReport")
)

// PurchaseServiceClient is a client for the v1.PurchaseService service.
type PurchaseServiceClient interface {
	RetrievePurchaseReport(context.Context, *connect.Request[v1.RetrievePurchaseReportRequest]) (*connect.Response[v1.RetrievePurchaseReportResponse], error)
}

// NewPurchaseServiceClient constructs a client for the v1.PurchaseService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPurchaseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PurchaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &purchaseServiceClient{
		retrievePurchaseReport: connect.NewClient[v1.RetrievePurchaseReportRequest, v1.RetrievePurchaseReportResponse](
			httpClient,
			baseURL+PurchaseServiceRetrievePurchaseReportProcedure,
			connect.WithSchema(purchaseServiceRetrievePurchaseReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// purchaseServiceClient implements PurchaseServiceClient.
type purchaseServiceClient struct {
	retrievePurchaseReport *connect.Client[v1.RetrievePurchaseReportRequest, v1.RetrievePurchaseReportResponse]
}

// RetrievePurchaseReport calls v1.PurchaseService.RetrievePurchaseReport.
func (c *purchaseServiceClient) RetrievePurchaseReport(ctx context.Context, req *connect.Request[v1.RetrievePurchaseReportRequest]) (*connect.Response[v1.RetrievePurchaseReportResponse], error) {
	return c.retrievePurchaseReport.CallUnary(ctx, req)
}

// PurchaseServiceHandler is an implementation of the v1.PurchaseService service.
type PurchaseServiceHandler interface {
	RetrievePurchaseReport(context.Context, *connect.Request[v1.RetrievePurchaseReportRequest]) (*connect.Response[v1.RetrievePurchaseReportResponse], error)
}

// NewPurchaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPurchaseServiceHandler(svc PurchaseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	purchaseServiceRetrievePurchaseReportHandler := connect.NewUnaryHandler(
		PurchaseServiceRetrievePurchaseReportProcedure,
		svc.RetrievePurchaseReport,
		connect.WithSchema(purchaseServiceRetrievePurchaseReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.PurchaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PurchaseServiceRetrievePurchaseReportProcedure:
			purchaseServiceRetrievePurchaseReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPurchaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPurchaseServiceHandler struct{}

func (UnimplementedPurchaseServiceHandler) RetrievePurchaseReport(context.Context, *connect.Request[v1.RetrievePurchaseReportRequest]) (*connect.Response[v1.RetrievePurchaseReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.PurchaseService.RetrievePurchaseReport is not implemented"))
}
