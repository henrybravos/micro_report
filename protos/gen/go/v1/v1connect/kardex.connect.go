// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/kardex.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/henrybravo/micro-report/protos/gen/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KardexServiceName is the fully-qualified name of the KardexService service.
	KardexServiceName = "v1.KardexService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KardexServiceRetrieveKardexValuedProcedure is the fully-qualified name of the KardexService's
	// RetrieveKardexValued RPC.
	KardexServiceRetrieveKardexValuedProcedure = "/v1.KardexService/RetrieveKardexValued"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	kardexServiceServiceDescriptor                    = v1.File_v1_kardex_proto.Services().ByName("KardexService")
	kardexServiceRetrieveKardexValuedMethodDescriptor = kardexServiceServiceDescriptor.Methods().ByName("RetrieveKardexValued")
)

// KardexServiceClient is a client for the v1.KardexService service.
type KardexServiceClient interface {
	RetrieveKardexValued(context.Context, *connect.Request[v1.RetrieveKardexValuedRequest]) (*connect.Response[v1.RetrieveKardexValuedResponse], error)
}

// NewKardexServiceClient constructs a client for the v1.KardexService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKardexServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KardexServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kardexServiceClient{
		retrieveKardexValued: connect.NewClient[v1.RetrieveKardexValuedRequest, v1.RetrieveKardexValuedResponse](
			httpClient,
			baseURL+KardexServiceRetrieveKardexValuedProcedure,
			connect.WithSchema(kardexServiceRetrieveKardexValuedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// kardexServiceClient implements KardexServiceClient.
type kardexServiceClient struct {
	retrieveKardexValued *connect.Client[v1.RetrieveKardexValuedRequest, v1.RetrieveKardexValuedResponse]
}

// RetrieveKardexValued calls v1.KardexService.RetrieveKardexValued.
func (c *kardexServiceClient) RetrieveKardexValued(ctx context.Context, req *connect.Request[v1.RetrieveKardexValuedRequest]) (*connect.Response[v1.RetrieveKardexValuedResponse], error) {
	return c.retrieveKardexValued.CallUnary(ctx, req)
}

// KardexServiceHandler is an implementation of the v1.KardexService service.
type KardexServiceHandler interface {
	RetrieveKardexValued(context.Context, *connect.Request[v1.RetrieveKardexValuedRequest]) (*connect.Response[v1.RetrieveKardexValuedResponse], error)
}

// NewKardexServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKardexServiceHandler(svc KardexServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kardexServiceRetrieveKardexValuedHandler := connect.NewUnaryHandler(
		KardexServiceRetrieveKardexValuedProcedure,
		svc.RetrieveKardexValued,
		connect.WithSchema(kardexServiceRetrieveKardexValuedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.KardexService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KardexServiceRetrieveKardexValuedProcedure:
			kardexServiceRetrieveKardexValuedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKardexServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKardexServiceHandler struct{}

func (UnimplementedKardexServiceHandler) RetrieveKardexValued(context.Context, *connect.Request[v1.RetrieveKardexValuedRequest]) (*connect.Response[v1.RetrieveKardexValuedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.KardexService.RetrieveKardexValued is not implemented"))
}
