// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/journal.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/henrybravo/micro-report/protos/gen/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JournalServiceName is the fully-qualified name of the JournalService service.
	JournalServiceName = "v1.JournalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JournalServiceRetrieveJournalReportProcedure is the fully-qualified name of the JournalService's
	// RetrieveJournalReport RPC.
	JournalServiceRetrieveJournalReportProcedure = "/v1.JournalService/RetrieveJournalReport"
	// JournalServiceRetrieveGeneralJournalProcedure is the fully-qualified name of the JournalService's
	// RetrieveGeneralJournal RPC.
	JournalServiceRetrieveGeneralJournalProcedure = "/v1.JournalService/RetrieveGeneralJournal"
	// JournalServiceRetrieveMajorBookProcedure is the fully-qualified name of the JournalService's
	// RetrieveMajorBook RPC.
	JournalServiceRetrieveMajorBookProcedure = "/v1.JournalService/RetrieveMajorBook"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	journalServiceServiceDescriptor                      = v1.File_v1_journal_proto.Services().ByName("JournalService")
	journalServiceRetrieveJournalReportMethodDescriptor  = journalServiceServiceDescriptor.Methods().ByName("RetrieveJournalReport")
	journalServiceRetrieveGeneralJournalMethodDescriptor = journalServiceServiceDescriptor.Methods().ByName("RetrieveGeneralJournal")
	journalServiceRetrieveMajorBookMethodDescriptor      = journalServiceServiceDescriptor.Methods().ByName("RetrieveMajorBook")
)

// JournalServiceClient is a client for the v1.JournalService service.
type JournalServiceClient interface {
	RetrieveJournalReport(context.Context, *connect.Request[v1.RetrieveJournalReportRequest]) (*connect.Response[v1.RetrieveJournalReportResponse], error)
	RetrieveGeneralJournal(context.Context, *connect.Request[v1.RetrieveGeneralJournalRequest]) (*connect.Response[v1.RetrieveGeneralJournalResponse], error)
	RetrieveMajorBook(context.Context, *connect.Request[v1.RetrieveMajorBookRequest]) (*connect.Response[v1.RetrieveMajorBookResponse], error)
}

// NewJournalServiceClient constructs a client for the v1.JournalService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJournalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JournalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &journalServiceClient{
		retrieveJournalReport: connect.NewClient[v1.RetrieveJournalReportRequest, v1.RetrieveJournalReportResponse](
			httpClient,
			baseURL+JournalServiceRetrieveJournalReportProcedure,
			connect.WithSchema(journalServiceRetrieveJournalReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		retrieveGeneralJournal: connect.NewClient[v1.RetrieveGeneralJournalRequest, v1.RetrieveGeneralJournalResponse](
			httpClient,
			baseURL+JournalServiceRetrieveGeneralJournalProcedure,
			connect.WithSchema(journalServiceRetrieveGeneralJournalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		retrieveMajorBook: connect.NewClient[v1.RetrieveMajorBookRequest, v1.RetrieveMajorBookResponse](
			httpClient,
			baseURL+JournalServiceRetrieveMajorBookProcedure,
			connect.WithSchema(journalServiceRetrieveMajorBookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// journalServiceClient implements JournalServiceClient.
type journalServiceClient struct {
	retrieveJournalReport  *connect.Client[v1.RetrieveJournalReportRequest, v1.RetrieveJournalReportResponse]
	retrieveGeneralJournal *connect.Client[v1.RetrieveGeneralJournalRequest, v1.RetrieveGeneralJournalResponse]
	retrieveMajorBook      *connect.Client[v1.RetrieveMajorBookRequest, v1.RetrieveMajorBookResponse]
}

// RetrieveJournalReport calls v1.JournalService.RetrieveJournalReport.
func (c *journalServiceClient) RetrieveJournalReport(ctx context.Context, req *connect.Request[v1.RetrieveJournalReportRequest]) (*connect.Response[v1.RetrieveJournalReportResponse], error) {
	return c.retrieveJournalReport.CallUnary(ctx, req)
}

// RetrieveGeneralJournal calls v1.JournalService.RetrieveGeneralJournal.
func (c *journalServiceClient) RetrieveGeneralJournal(ctx context.Context, req *connect.Request[v1.RetrieveGeneralJournalRequest]) (*connect.Response[v1.RetrieveGeneralJournalResponse], error) {
	return c.retrieveGeneralJournal.CallUnary(ctx, req)
}

// RetrieveMajorBook calls v1.JournalService.RetrieveMajorBook.
func (c *journalServiceClient) RetrieveMajorBook(ctx context.Context, req *connect.Request[v1.RetrieveMajorBookRequest]) (*connect.Response[v1.RetrieveMajorBookResponse], error) {
	return c.retrieveMajorBook.CallUnary(ctx, req)
}

// JournalServiceHandler is an implementation of the v1.JournalService service.
type JournalServiceHandler interface {
	RetrieveJournalReport(context.Context, *connect.Request[v1.RetrieveJournalReportRequest]) (*connect.Response[v1.RetrieveJournalReportResponse], error)
	RetrieveGeneralJournal(context.Context, *connect.Request[v1.RetrieveGeneralJournalRequest]) (*connect.Response[v1.RetrieveGeneralJournalResponse], error)
	RetrieveMajorBook(context.Context, *connect.Request[v1.RetrieveMajorBookRequest]) (*connect.Response[v1.RetrieveMajorBookResponse], error)
}

// NewJournalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJournalServiceHandler(svc JournalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	journalServiceRetrieveJournalReportHandler := connect.NewUnaryHandler(
		JournalServiceRetrieveJournalReportProcedure,
		svc.RetrieveJournalReport,
		connect.WithSchema(journalServiceRetrieveJournalReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	journalServiceRetrieveGeneralJournalHandler := connect.NewUnaryHandler(
		JournalServiceRetrieveGeneralJournalProcedure,
		svc.RetrieveGeneralJournal,
		connect.WithSchema(journalServiceRetrieveGeneralJournalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	journalServiceRetrieveMajorBookHandler := connect.NewUnaryHandler(
		JournalServiceRetrieveMajorBookProcedure,
		svc.RetrieveMajorBook,
		connect.WithSchema(journalServiceRetrieveMajorBookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.JournalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JournalServiceRetrieveJournalReportProcedure:
			journalServiceRetrieveJournalReportHandler.ServeHTTP(w, r)
		case JournalServiceRetrieveGeneralJournalProcedure:
			journalServiceRetrieveGeneralJournalHandler.ServeHTTP(w, r)
		case JournalServiceRetrieveMajorBookProcedure:
			journalServiceRetrieveMajorBookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJournalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJournalServiceHandler struct{}

func (UnimplementedJournalServiceHandler) RetrieveJournalReport(context.Context, *connect.Request[v1.RetrieveJournalReportRequest]) (*connect.Response[v1.RetrieveJournalReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.JournalService.RetrieveJournalReport is not implemented"))
}

func (UnimplementedJournalServiceHandler) RetrieveGeneralJournal(context.Context, *connect.Request[v1.RetrieveGeneralJournalRequest]) (*connect.Response[v1.RetrieveGeneralJournalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.JournalService.RetrieveGeneralJournal is not implemented"))
}

func (UnimplementedJournalServiceHandler) RetrieveMajorBook(context.Context, *connect.Request[v1.RetrieveMajorBookRequest]) (*connect.Response[v1.RetrieveMajorBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.JournalService.RetrieveMajorBook is not implemented"))
}
